#![no_std]
//use soroban_sdk::{contract, contractimpl, symbol_short, log, Env, Symbol};
use soroban_sdk::{contract,  contractimpl, log, symbol_short, Env, Symbol};

const COUNTER: Symbol = symbol_short!("COUNTER");

#[contract]
pub struct Echo2Contract;
//extern crate std;
#[contractimpl]
impl Echo2Contract {
    // echo2 based on examples/events
    // version ALFA. write and read COUNTER. Not display anything.
    // Urgent to fix:
    // a. how display (log or println)
    // Step 2: accept an argument
    //use log::{info, warn};
    pub fn echo2(env: Env) -> u32 {
        // Get the current count.
//        let mut count: u32 = env.storage().instance().get(&COUNTER).unwrap_or(0); // If no value set, assume 0.
        let mut count: u32 = env.storage().persistent().get(&COUNTER).unwrap_or(0); // If no value set, assume 0.
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
        log!(&env, "count: {}", count);
//std::println!("lib.rs ------count :{} ",count);
        // Increment the count.
        count += 1;

        // Save the count.
        //env.storage().instance().set(&COUNTER, &count);
        env.storage().persistent().set(&COUNTER, &count);

        // Publish an event about the increment occuring.
        // The event has two topics:
        //   - The "COUNTER" symbol.
        //   - The "increment" symbol.
        // The event data is the count.
        env.events()
            .publish((COUNTER, symbol_short!("echo2")), count);

        // Return the count to the caller.
//std::println!("lib.rs ------count :{} ",count);
        count
    }
}

mod test;
